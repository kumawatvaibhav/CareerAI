CareerAI Backend Documentation
============================

This document provides a detailed explanation of the main.py code in the CareerAI backend.

1. IMPORTS AND INITIALIZATION
----------------------------
- Flask: Web framework for creating the API
- Flask CORS: Handles Cross-Origin Resource Sharing
- os: For environment variable access
- dotenv: Loads environment variables from .env file
- logging: For logging application events
- traceback: For error stack traces
- groq: For AI API interactions
- re: For regular expressions
- json: For JSON data handling
- Path: For file path operations

2. CONFIGURATION
---------------
- Environment variables loaded from .env file
- Logging configured with timestamp, name, level, and message format
- Flask app initialized with CORS enabled
- GROQ client initialized with API key

3. HELPER FUNCTIONS
------------------
3.1 load_json_data()
- Purpose: Loads career and salary data from JSON files
- Input: None
- Output: Two dictionaries (career_data, salary_data)
- Process:
  * Reads career descriptions from carrerFinal150.json
  * Reads salary and role data from salaryJobRole150.json
  * Returns both datasets or empty dictionaries if error occurs

3.2 clean_response()
- Purpose: Cleans AI responses by removing unwanted content
- Input: Text response from AI
- Output: Cleaned text
- Process:
  * Removes <think> tags and their content
  * Removes incomplete think tags
  * Removes lines containing "think" or "thought process"
  * Removes lines with explanations or reasoning
  * Extracts career names from numbered lists
  * Returns cleaned text or non-empty lines

3.3 match_career_data()
- Purpose: Matches career names with data and handles unmatched careers
- Input: career_names, career_data, salary_data
- Output: List of matched careers with complete information
- Process:
  * First pass: Matches careers with JSON data
  * Second pass: Gets data for unmatched careers from AI
  * Combines matched and AI-generated data
  * Ensures exactly 10 careers are returned
  * Maintains original career order

4. API ENDPOINTS
---------------
4.1 /api/suggestions (POST)
- Purpose: Suggests careers based on user selections
- Input: JSON with selected skills/interests
- Output: List of 10 matched careers
- Process:
  * Extracts selections from input
  * Creates AI prompt for career suggestions
  * Gets AI response and cleans it
  * Matches careers with JSON data
  * Returns structured career data

4.2 /api/chat (POST)
- Purpose: Handles follow-up questions about careers
- Input: Message, message history, isCareerQuery flag
- Output: AI response and career data
- Process:
  * Determines if question is career-related
  * Creates appropriate prompt based on question type
  * Gets AI response and cleans it
  * Returns formatted response

5. PROMPT TEMPLATES
------------------
5.1 Career Suggestion Prompt
- Purpose: Gets career suggestions from AI
- Format: List of 10 specific technology careers
- Rules:
  * No additional text or formatting
  * Specific career names
  * No numbers or categories
  * No explanations

5.2 Career Query Prompt
- Purpose: Detailed career information
- Format: Structured sections with bullet points
- Sections:
  * OVERVIEW
  * KEY SKILLS AND QUALIFICATIONS
  * CAREER GROWTH OPPORTUNITIES
  * DAY-TO-DAY RESPONSIBILITIES
  * INDUSTRY DEMAND AND FUTURE PROSPECTS

5.3 General Career Prompt
- Purpose: Career-related questions
- Format: Three sections with bullet points
- Sections:
  * MAIN POINTS
  * DETAILED EXPLANATION
  * PRACTICAL IMPLICATIONS

5.4 Greeting/General Prompt
- Purpose: Non-career questions and greetings
- Format: Natural, conversational response
- Rules:
  * No formatting or bullet points
  * No section headings
  * Natural tone

6. RESPONSE FORMATTING
---------------------
6.1 Career Responses
- Uses • for bullet points
- Section separators (──────────────────────────────)
- CAPITAL LETTERS for headings
- Extra spacing between sections

6.2 General Responses
- Natural, conversational format
- No special formatting
- Clear and concise

7. ERROR HANDLING
----------------
- Input validation
- API error handling
- JSON parsing errors
- File loading errors
- Response cleaning errors

8. LOGGING
----------
Essential logs include:
- Input selections
- AI-suggested careers
- Careers found in JSON data
- Careers generated by AI
- Follow-up questions
- AI responses

9. DATA STRUCTURES
-----------------
9.1 Career Object
{
    "id": int,
    "name": string,
    "category": string,
    "description": string,
    "salary_range": object,
    "roles_offered": array,
    "required_skills": array
}

9.2 Session Storage
- Uses request.remote_addr as key
- Stores suggested careers for follow-up questions

10. SECURITY CONSIDERATIONS
--------------------------
- CORS enabled for frontend access
- Environment variables for sensitive data
- Input validation
- Error handling without exposing internals

11. PERFORMANCE OPTIMIZATIONS
---------------------------
- Single API call for unmatched careers
- Efficient JSON data loading
- Response cleaning for better formatting
- Session-based career storage

12. FUTURE IMPROVEMENTS
---------------------
- Caching for frequently accessed data
- Rate limiting for API calls
- More sophisticated career matching
- Enhanced error recovery
- Additional response formats 